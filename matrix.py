# 矩阵运算
import numpy as np

# 点积运算
a = np.array([[1, 2], [3, 4]])
b = np.array([[11, 12], [13, 14]])
# 输出结果为
# [[37 40]
#  [85 92]]
# 计算公式为[[1*11+2*13, 1*12+2*14],[3*11+4*13, 3*12+4*14]]
# print(np.dot(a, b))
# 向量乘积
# 输出结果为130
# 计算公式为1*11 + 2*12 + 3*13 + 4*14 = 130
print(np.vdot(a, b))
# 向量内积 numpy.inner() 函数返回一维数组的向量内积。对于更高的维度，它返回最后一个轴上的和的乘积
# 输出结果为
# [[35 41]
#  [81 95]]
# 内积与矩阵乘积不一样
print(np.inner(a, b))

# numpy.matmul 函数返回两个数组的矩阵乘积。 虽然它返回二维数组的正常乘积，但如果任一参数的维数大于2，
# 则将其视为存在于最后两个索引的矩阵的栈，并进行相应广播
a = [[1, 0],[0, 1]]
b = [[4, 1],[2, 2]]
# 输出结果为
# [[4 1]
#  [2 2]]
print(np.matmul(a, b))

a = [[1, 0], [0, 1]]
b = [1, 2]
# 输出结果为[1 2]
# 将结果中附加的一行去掉
print(np.matmul(a, b))
# 输出结果为[1 2]
print(np.matmul(b, a))

# 矩阵的行列式
# 输出结果为1.0
print(np.linalg.det(a))
# 给出numpy.linalg.solve() 函数给出了矩阵形式的线性方程的解
# numpy.linalg.inv() 函数计算矩阵的乘法逆矩阵
x = np.array([[1, 2], [3, 4]])
y = np.linalg.inv(x)
# 输出结果为
# [[-2.   1. ]
#  [ 1.5 -0.5]]
# print(y)

a = np.array([[1, 1, 1], [0, 2, 5], [2, 5, -1]])
ainv = np.linalg.inv(a)
b = np.array([[6], [-4], [27]])
x = np.linalg.solve(a, b)
# 方程的解为 A^-1b
# [[ 5.]
#  [ 3.]
#  [-2.]]
print(x)